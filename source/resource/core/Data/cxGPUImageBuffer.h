/*=========================================================================
This file is part of CustusX, an Image Guided Therapy Application.

Copyright (c) 2008-2014, SINTEF Department of Medical Technology
All rights reserved.

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, 
   this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors 
   may be used to endorse or promote products derived from this software 
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
=========================================================================*/


#ifndef CXGPUIMAGEBUFFER_H_
#define CXGPUIMAGEBUFFER_H_

#include "cxResourceExport.h"
#include "cxPrecompiledHeader.h"

#include <boost/shared_ptr.hpp>
#include <boost/weak_ptr.hpp>
#include <map>
#include <list>
#include "vtkForwardDeclarations.h"

namespace cx
{

/**
 * \file
 * \addtogroup cx_resource_core_data
 * @{
 */

/** \brief Helper class for sharing GPU memory over several Views (GL contexts).
 *
 * This one stores 3D volume texture in the form of a vtkImageDataPtr
 *
 */
class cxResource_EXPORT GPUImageDataBuffer
{
public:
	virtual ~GPUImageDataBuffer() {}
	/** Allocate resources for the volume on the GPU.
	 *
	 *  Call this from inside a PrepareForRendering() method in vtk.
	 */
	virtual void allocate(int textureUnitIndex) = 0;
//	/** Assuming imageData is changed,
//	  * send vtkImageData to GPU.
//	  */
//	virtual void updateTexture() = 0;
	/**Activate and bind the volume and lut buffers inside the texture units
	 * GL_TEXTURE<2X> and GL_TEXTURE<2X+1>.
	 * Use during RenderInternal()
	 */
	virtual void bind(int textureUnitIndex) = 0;
	virtual int getMemorySize() = 0;

	/** Return the texture uid for this object,
	  * as generated by glGenTextures().
	  *
	  * Prerequisite: allocate() has been called.
	  */
	virtual unsigned int getTextureUid() const = 0;
	//virtual vtkImageDataPtr getVtkImageData() = 0;
};

typedef boost::shared_ptr<GPUImageDataBuffer> GPUImageDataBufferPtr;
typedef boost::weak_ptr<GPUImageDataBuffer> GPUImageDataBufferWeakPtr;

cxResource_EXPORT GPUImageDataBufferPtr createGPUImageDataBuffer(vtkImageDataPtr volume);

/**\brief Helper class for sharing GPU memory over several Views (GL contexts).
 *
 * This one stores lut in the form of a vtkUnsignedCharArrayPtr
 *
 */
class cxResource_EXPORT GPUImageLutBuffer
{
public:
	virtual ~GPUImageLutBuffer() {}
	/** Allocate resources for the lookup table and the volume on the GPU.
	 *  Prerequisite: SetImage and SetcolorTable has been called.
	 *
	 *  Call this from inside a PrepareForRendering() methods in vtk.
	 */
	virtual void allocate() = 0;
//	/** If data is changed, send data to GPU.
//	  */
//	virtual void updateTexture() = 0;
	/** Activate and bind the volume and lut buffers inside the texture units
	 *  GL_TEXTURE<2X> and GL_TEXTURE<2X+1>.
	 *  Use during RenderInternal()
	 */
	virtual void bind(int textureUnitIndex) = 0;
	/**Size of lut. Used by fragment shader.
	 */
	virtual int getLutSize() const = 0;
};

typedef boost::shared_ptr<GPUImageLutBuffer> GPUImageLutBufferPtr;
typedef boost::weak_ptr<GPUImageLutBuffer> GPUImageLutBufferWeakPtr;

cxResource_EXPORT GPUImageDataBufferPtr createGPUImageDataBuffer(vtkImageDataPtr volume);
cxResource_EXPORT GPUImageLutBufferPtr createGPUImageLutBuffer(vtkUnsignedCharArrayPtr lut);

/**\brief Repository for GPU buffers
 *
 * Use this repository for avoiding multiple allocations of buffer data. *
 *
 */
class cxResource_EXPORT GPUImageBufferRepository
{
public:
	static GPUImageBufferRepository* getInstance();
	static void shutdown();

	GPUImageDataBufferPtr getGPUImageDataBuffer(vtkImageDataPtr volume);
	GPUImageLutBufferPtr getGPUImageLutBuffer(vtkUnsignedCharArrayPtr lut);
	int getMemoryUsage(int *textures);
	/**
	 * Free all resources in the repository, for instance on session change
	 */
	void clear();
private:
	GPUImageBufferRepository();
	~GPUImageBufferRepository();
	class GPUImageBufferRepositoryInternal* mInternal;
	static GPUImageBufferRepository* mInstance;
	void tearDown();
};

// Not allowed to export static functions from dll on Windows,
// so we have to use this funciton instead of GPUImageBufferRepository::getInstance
cxResource_EXPORT GPUImageBufferRepository* getGPUImageBufferRepository();

/**
 * \}
 */

}

#endif /*CXGPUIMAGEBUFFER_H_*/
